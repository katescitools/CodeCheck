# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 10-15-21


import re


ERR1 = 'Standard library function overridden in file %1'


def ids():
	return ('M17-0-3', 'MISRA08_17-0-3', 'CPP_L012')


def name(id):
	return {
		'M17-0-3': 'Published Standards/AUTOSAR/The names of standard library functions shall not be overridden',
		'MISRA08_17-0-3': 'Published Standards/MISRA-C++ 2008/17-0-3 The names of standard library functions shall not be overridden',
		'CPP_L012': 'All Checks/Language Specific/C and C++/Libraries/The names of standard library functions shall not be overridden',
	}[id]


def description():
	return 'The names of standard library functions shall not be overridden.'


def detailed_description():
	return '''\

<p><b>Rationale</b><br>
Where the developer uses new versions of standard library functions (e.g. to enhance functionality
or add checks of input values), the modified function shall have a new name. However, it is
permissible to overload the name to add new parameter types if the functionality is consistent
with those of the original. This ensures that the behaviour associated with the name remains
consistent. So, for example, if a new version of the sqrt function is written to check that the input
is not negative, the new function shall not be named "sqrt", but shall be given a new name. It is
permissible to add a new <i>sqrt</i> function for a type not present in the library.
</p>

<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
int32_t printf ( int32_t a, int32_t b ) // Non-compliant
{
	return ( ( a > b ) ? a : b );
}
</pre>

'''


def test_language(language):
	return language == 'C++'


def test_entity(file):
	return True


def test_global():
	return False


def check(check, file):

	# Define a diciontary of reserved keywords
	reservedNames = {'abort', 'abs', 'acos', 'asctime', 'asin', 'atan', 'atan2', 'atexit', 
					 'atof', 'atoi', 'atol', 'bsearch', 'btowc', 'calloc', 'ceil', 
					 'clearerr', 'clock', 'cos', 'cosh', 'ctime', 'difftime', 'div', 
					 'exit', 'exp', 'fabs', 'fclose', 'feof', 'ferror', 'fflush', 'fgetc', 
					 'fgetpos', 'fgets', 'fgetwc', 'fgetws', 'floor', 'fmod', 'fopen', 
					 'fprintf', 'fputc', 'fputs', 'fputwc', 'fputws', 'fread', 'free', 
					 'freopen', 'frexp', 'fscanf', 'fseek', 'fsetpos', 'ftell', 'fwide', 
					 'fwprintf', 'fwrite', 'fwscanf', 'getc', 'getchar', 'getenv', 'gets', 
					 'getwc', 'getwchar', 'gmtime', 'isalnum', 'isalpha', 'iscntrl', 
					 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 
					 'isupper', 'iswalnum', 'iswalpha', 'iswcntrl', 'iswctype', 'iswdigit', 
					 'iswgraph', 'iswlower', 'iswprint', 'iswpunct', 'iswspace', 'iswupper', 
					 'iswxdigit', 'isxdigit', 'labs', 'ldexp', 'ldiv', 'localeconv', 
					 'localtime', 'log', 'log10', 'longjmp', 'malloc', 'mblen', 'mbrlen', 
					 'mbrtowc', 'mbsinit', 'mbsrtowcs', 'mbstowcs', 'mbtowc', 'memchr', 
					 'memcmp', 'memcpy', 'memmove', 'memset', 'mktime', 'modf', 'perror', 
					 'pow', 'printf', 'putc', 'putchar', 'puts', 'putwc', 'putwchar', 'qsort', 
					 'raise', 'rand', 'realloc', 'remove', 'rename', 'rewind', 'scanf', 
					 'setbuf', 'setlocale', 'setvbuf', 'signal', 'sin', 'sinh', 'sprintf', 
					 'sqrt', 'srand', 'sscanf', 'strcat', 'strchr', 'strcmp', 'strcoll', 
					 'strcpy', 'strcspn', 'strerror', 'strftime', 'strlen', 'strncat', 
					 'strncmp', 'strncpy', 'strpbrk', 'strrchr', 'strspn', 'strstr', 'strtod', 
					 'strtok', 'strtol', 'strtoul', 'strxfrm', 'swprintf', 'swscanf', 'system', 
					 'tan', 'tanh', 'time', 'tmpfile', 'tmpnam', 'tolower', 'toupper', 
					 'towctrans', 'towlower', 'towupper', 'ungetc', 'ungetwc', 'vfprintf', 
					 'vfwprintf', 'vprintf', 'vsprintf', 'vswprintf', 'vwprintf', 'wcrtomb', 
					 'wcscat', 'wcschr', 'wcscmp', 'wcscoll', 'wcscpy', 'wcscspn', 'wcsftime', 
					 'wcslen', 'wcsncat', 'wcsncmp', 'wcsncpy', 'wcspbrk', 'wcsrchr', 
					 'wcsrtombs', 'wcsspn', 'wcsstr', 'wcstod', 'wcstok', 'wcstol', 'wcstombs', 
					 'wcstoul', 'wcsxfrm', 'wctob', 'wctomb', 'wctrans', 'wctype', 'wmemchr', 
					 'wmemcmp', 'wmemcpy', 'wmemmove', 'wmemset', 'wprintf', 'wscanf'}

	# Loop through all macros and check the defines against the black list
	funcrefs = file.filerefs('C Define', '~Member')
	for ref in funcrefs:
		name = ref.ent().name()
		if name in reservedNames:
			check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1, file.name())
