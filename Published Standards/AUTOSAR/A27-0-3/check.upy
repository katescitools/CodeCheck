# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-28-2021
import re
from Modules import stringIsStd

ERR1 = 'Input and output were alternated before flushing file stream'

def ids():
    return ('A27-0-3', 'CPP_L026')

def name(id):
    return {
        'A27-0-3': """\
Published Standards/AUTOSAR/Alternate input and output operations on a file
stream shall not be used without an intervening flush or positioning call""",
        'CPP_L026': """\
All Checks/Language Specific/C and C++/Libraries/Alternate input and output
operations on a file stream shall not be used without an intervening flush or
positioning call"""

    }[id]

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>There are following restrictions on reading and writing operations called for
an object of class basic_filebuf<charT, traits>:</p>
<ul>
<li>output shall not be directly followed by input without an intervening call
to the fflush function or to a file positioning function (fseek, fsetpos, or
rewind).</li>
<li>input shall not be directly followed by output without an intervening call
to a file positioning function, unless the input operation encounters
end-of-file.</li>
</ul>
<p>It is recommended to use a file stream either for output (std::ofstream) or
input(std::ifstream) and not for both in the same context. This avoids the
mentioned problem altogether.</p>
<p><b>Example</b></p>
<pre>
1  // $Id: A27-0-3.cpp 311495 2018-03-13 13:02:54Z michal.szczepankiewicz $
2
3  #include <fstream>
4  #include <string>
5
6  int main(void)
7  {
8    std::fstream f("testfile");
9
10   f << "Output";
11   std::string str1;
12   f >> str1; // non-compliant
13
14   f << "More output";
15   std::string str2;
16   f.seekg(0, std::ios::beg);
17   f >> str2; //compliant
18
19   return 0;
20 }
</pre>
"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'


def check(check, file):
    lexer = None
    refs = file.filerefs('Define', 'Object')

    for ref in refs:
        # Skip anything but std::fstream
        if not stringIsStd(str(ref.ent().type()), 'fstream'):
            continue

        input = False
        output = False

        useRefs = ref.ent().refs('Useby')

        for useRef in useRefs:
            if not lexer:
                lexer = file.lexer()

            lexeme = lexer.lexeme(useRef.line(), useRef.column())

            lexeme = lexeme.next(True, True)

            if lexeme and lexeme.text() == '<<':
                output = True

            if lexeme and lexeme.text() == '>>':
                input = True

            if lexeme.text() == '.':
                lexeme = lexeme.next(True, True)

                # Reset variables since flush keyword was found
                if lexeme and lexeme.text() == 'seekg':
                    input = False
                    output = False


            # If both of these are true then input and output were alternated
            if input and output:
                check.violation(useRef.ent(), file, useRef.line(), useRef.column(), ERR1)
