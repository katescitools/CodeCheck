import re

ERR1 = 'Subtraction between pointers that address elements of different arrays'

INVALID = 0
POINTER = 1

# The ID for the check
def ids():
    return ('M5-0-17', 'MISRA08_5-0-17', 'CPP_P041', 'MISRA12_18.2', 'ARR36-C')

# The short name of the check
def name(id):
    return {
        'M5-0-17': 'Published Standards/AUTOSAR/Subtraction between pointers shall only be applied to pointers that address elements of the same array',
        'MISRA08_5-0-17': 'Published Standards/MISRA-C++ 2008/5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array',
        'CPP_P041': 'All Checks/Language Specific/C and C++/Pointers/Subtraction between pointers shall only be applied to pointers that address elements of the same array',
        'MISRA12_18.2': 'Published Standards/MISRA C 2012/18.2 Subtraction between pointers shall only be applied to pointers that address elements of the same array',
        'ARR36-C': 'SSP_Standards/SEI Cert Standards/C/Do not subtract or compare two pointers that do not refer to the same array',
    }[id]

# The short description of the check
def description():
    return 'Subtraction between pointers shall only be applied to pointers that address elements of the same array.'

# The long description of the check
def detailed_description(id):
    return {
        'M5-0-17': '''
<p><b>Rationale</b></p>

<p>This rule applies to expressions of the form:</p>

<pre>    pointer_expression_1 - pointer_expression_2</pre>

<p>where <code>pointer_expression_1</code> and <code>pointer_expression_2</code> are pointers to array elements. It is <i>undefined behaviour</i> if <code>pointer_expression_1</code> and <code>pointer_expression_2</code> do not point to elements of the same array or the element one beyond the end of that array.</p>

<p><b>Example</b></p>

<pre style="margin-top:0;padding-top:0;">
void f1 ( )
{
    int32_t a1[ 10 ];
    int32_t a2[ 10 ];

    int32_t * p1 = &a1 [ 1 ];
    int32_t * p2 = &a2 [ 10 ];
    int32_t * p3 = &a1 [ 2 ];
    int32_t diff;

    diff = p1 - a1; // Compliant
    diff = p2 - a2; // Compliant
    diff = p1 - p2; // Non-compliant
    diff = p2 - p1; // Non-compliant
    diff = p3 - p1; // Compliant
}
</pre>
''',
        'MISRA08_5-0-17': '''
<p><b>Rationale</b></p>

<p>This rule applies to expressions of the form:</p>

<pre>    pointer_expression_1 - pointer_expression_2</pre>

<p>where <code>pointer_expression_1</code> and <code>pointer_expression_2</code> are pointers to array elements. It is <i>undefined behaviour</i> if <code>pointer_expression_1</code> and <code>pointer_expression_2</code> do not point to elements of the same array or the element one beyond the end of that array.</p>

<p><b>Example</b></p>

<pre style="margin-top:0;padding-top:0;">
void f1 ( )
{
    int32_t a1[ 10 ];
    int32_t a2[ 10 ];

    int32_t * p1 = &a1 [ 1 ];
    int32_t * p2 = &a2 [ 10 ];
    int32_t * p3 = &a1 [ 2 ];
    int32_t diff;

    diff = p1 - a1; // Compliant
    diff = p2 - a2; // Compliant
    diff = p1 - p2; // Non-compliant
    diff = p2 - p1; // Non-compliant
    diff = p3 - p1; // Compliant
}
</pre>
''',
        'CPP_P041': '''
<p><b>Rationale</b></p>

<p>This rule applies to expressions of the form:</p>

<pre>    pointer_expression_1 - pointer_expression_2</pre>

<p>where <code>pointer_expression_1</code> and <code>pointer_expression_2</code> are pointers to array elements. It is <i>undefined behaviour</i> if <code>pointer_expression_1</code> and <code>pointer_expression_2</code> do not point to elements of the same array or the element one beyond the end of that array.</p>

<p><b>Example</b></p>

<pre style="margin-top:0;padding-top:0;">
void f1 ( )
{
    int32_t a1[ 10 ];
    int32_t a2[ 10 ];

    int32_t * p1 = &a1 [ 1 ];
    int32_t * p2 = &a2 [ 10 ];
    int32_t * p3 = &a1 [ 2 ];
    int32_t diff;

    diff = p1 - a1; // Compliant
    diff = p2 - a2; // Compliant
    diff = p1 - p2; // Non-compliant
    diff = p2 - p1; // Non-compliant
    diff = p3 - p1; // Compliant
}
</pre>
''',
        'MISRA12_18.2': '''
<p><b>Rationale</b></p>

<p>This rule applies to expressions of the form:</p>

<pre>pointer_expression_1 - pointer_expression_2</pre>

<p>It is undefined behaviour if <code>pointer_expression_1</code> and <code>pointer_expression_2</code> do not point to elements of the same array or the element one beyond the end of that array.</p>

<p><b>Example</b></p>

<pre style="margin-top:0;padding-top:0;">
#include &lt;stddef.h&gt;
void f1 ( int32_t *ptr )
{
  int32_t a1[ 10 ];
  int32_t a2[ 10 ];
  int32_t *p1 = &a1[ 1 ];
  int32_t *p2 = &a2[ 10 ];
  ptrdiff_t diff;
  diff = p1 - a1;          /* Compliant */
  diff = p2 - a2;          /* Compliant */
  diff = p1 - p2;          /* Non-compliant */
  diff = ptr - p1;         /* Non-compliant */
}
</pre>

<p><b>See also</b></p>

<p>Dir 4.1, Rule 18.4</p>
''',
        'ARR36-C': '''
<p>Do not subtract or compare two pointers that do not refer to the same array</p>
<p>For the full standard: <i>https://wiki.sei.cmu.edu/confluence/display/c/ARR36-C.+Do+not+subtract+or+compare+two+pointers+that+do+not+refer+to+the+same+array</i></p>
<p><b>Exceptions</b></p>
<p><i>ARR36-C-EX1: Comparing two pointers to distinct members of the same struct object is allowed. Pointers to structure members declared later in the structure compare greater-than pointers to members declared earlier in the structure.</i></p>
<p><b>Noncompliant Code Example</b></p>
<pre>
# include &lt;stddef.h&gt;

enum { SIZE = 32 };

void func(void) {
  int nums[SIZE];
  int end;
  int *next_num_ptr = nums;
  size_t free_elements;

  /* Increment next_num_ptr as array fills */

  free_elements = &end - next_num_ptr;
}
</pre>
''',
    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def get_base_ent(ent):
    # RecursionError: maximum recursion depth exceeded while calling a Python object
    # if ent.ref("Assign Ptr") and ent.ref("Assign Ptr").ent():
    #   return get_base_ent(ent.ref("Assign Ptr").ent())
    # else:
    #   return ent
    temp_list = []
    temp_ent = ent
    while temp_ent and temp_ent.ref("Assign Ptr"):
        temp_ent = temp_ent.ref("Assign Ptr").ent()
        if temp_ent.id() not in temp_list:
            temp_list.append(temp_ent.id())
        else:
            break
    return temp_ent

def is_valid_ent(ent):
    if re.search(r"\*", str(ent.type())):
        return POINTER
    elif ent.ref("Typed") and ent.ref("Typed").ent():
        return is_valid_ent(ent.ref("Typed").ent())
    else:
        return INVALID

def get_right_operand(lex):
    return_lex = None
    while lex and lex.text() not in [";",","]:
        if lex.token() == "Identifier" and lex.ent():
            if lex.ent().kind().check("Object"):
                return_lex = lex.ent()
            break
        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
        if lex and lex.token() == "Operator":
            break
    return lex, return_lex

def get_left_operand(lex):
    return_lex = None
    while lex and (lex.text() != "=" or lex.token() not in ["Keyword", "Operator"]):
        if lex.token() == "Identifier" and lex.ent():
            if lex.ent().kind().check("Object"):
                return_lex = lex.ent()
            break
        lex = lex.previous(ignore_whitespace=True, ignore_comments=True)
        if lex and lex.token() == "Operator":
            break
    return return_lex

def check(check, file):
    lexer = file.lexer(True, 8, False, False)
    lex = lexer.first()

    while lex:
        if lex.token() == "Operator" and lex.text() == "-":
        # This rule applies to expressions of the form: pointer_expression_1 - pointer_expression_2

            # get left ptr entity
            left_ent = get_left_operand(lex)
            if left_ent == None:
                break
            left_ent_type = is_valid_ent(left_ent)

            # get right ptr entity
            temp_lex, right_ent = get_right_operand(lex)
            if right_ent == None:
                break
            right_ent_type = is_valid_ent(right_ent)

            if right_ent_type == INVALID and left_ent_type == INVALID:
                break

            # proceed validation if flow reaches here
            left_ent_base = get_base_ent(left_ent)
            right_ent_base = get_base_ent(right_ent)

            if left_ent_base.id() != right_ent_base.id():
                check.violation(None, file, lex.line_begin(), lex.column_begin(), ERR1)
                lex = temp_lex
        lex = lex.next(ignore_whitespace=True, ignore_comments=True)
