
ERR1 = 'Unused parameter'

# The ID for the check


def ids():
    return ('A0-1-5', 'CPP_F028')

# The short name of the check


def name(id):
    return {
        'A0-1-5': 'Published Standards/AUTOSAR/There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it',
        'CPP_F028': 'All Checks/Language Specific/C and C++/Functions/There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it',
    }[id]

# The short description of the check


def description():
    return 'There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it.'

# The long description of the check


def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Unused named parameters are often a result of a design changes and can lead to
mismatched parameter lists.</p>
<p>Note: This rule does not apply to unnamed parameters, as overridden methods for
some subclasses may need additional parameters.</p>
<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
1 //% $Id: A0-1-5.cpp 305588 2018-01-29 11:07:35Z michal.szczepankiewicz $
2
3 #include <cstdint>
4 #include <vector>
5
6 //Compressor.h
7 class Compressor
8 {
9 public:
10 using raw_memory_type = std::vector<uint8_t>;
11
12 raw_memory_type Compress(const raw_memory_type& in, uint8_t ratio);
13
14 private:
15 virtual raw_memory_type __Compress(const raw_memory_type& in, uint8_t ratio) = 0;
16 };
17
18 //Compressor.cpp
19 Compressor::raw_memory_type Compressor::Compress(const raw_memory_type& in, uint8_t ratio)
20 {
21 return __Compress(in, ratio);
22 }
23
24 //JPEGCompressor.h
25 class JPEGCompressor : public Compressor
26 {
27 private:
28 raw_memory_type __Compress(const raw_memory_type& in, uint8_t ratio) override;
29 };
30
31 //JPEGCompressor.cpp
32 JPEGCompressor::raw_memory_type JPEGCompressor::__Compress(const raw_memory_type&
in, uint8_t ratio)
33 {
34 raw_memory_type ret;
35 //jpeg compression, ratio used
36 return ret;
37 }
38
39 //HuffmanCompressor.h
40 class HuffmanCompressor : public Compressor
41 {
42 private:
43 raw_memory_type __Compress(const raw_memory_type& in, uint8_t) override;
44 };
45
46 //JPEGCompressor.cpp
47 HuffmanCompressor::raw_memory_type HuffmanCompressor::__Compress(const raw_memory_type& in, uint8_t)
48 {
49 raw_memory_type ret;
50 //Huffman compression, no ratio parameter available in the algorithm
51 return ret;
52 }
</pre>
<p><b>See also</b></p>
<p>C++ Core Guidelines [11]: F.9: Unused parameters should be unnamed</p>"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    use_kind = ["Set", "Use", "Assign", "Return", "Call", "Addr Use",
                "Modify", "Deref Call", "Deref Modify", "Deref Set", "Deref Use"]

    for ref in sorted(file.filerefs("Define", "Function"), key=lambda ref: ref.line()):
        if "Virtual" in ref.ent().kindname():
            for ent in ref.ent().ents(refkindstring="", entkindstring="Parameter"):
                if ent.name() != "[unnamed]":
                    kind_refs = [ref.kindname() for ref in ent.refs()]

                    if not any(kind in kind_refs for kind in use_kind):
                        check.violation(ent, file, ent.ref().line(),
                                        ent.ref().column(), ERR1)
