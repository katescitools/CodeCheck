import re

ERR1 = 'Exception is thrown when constructing the exception object'

# The ID for the check


def ids():
    return ('M15-1-1', 'CPP_E055')

def name(id):
    return {
        'M15-1-1': """\
Published Standards/AUTOSAR/Exception Object""",
        'CPP_E055': """\
All Checks/Language Specific/C and C++/Exception Handling/Exception Object"""

    }[id]

# The long description of the check


def detailed_description():
    return """
<p><b>Rationale</b></p>
<p>If an exception is thrown when constructing the exception object, or when evaluating the assignment
expression that initializes the exception object, it is that exception that propagates in preference to
the one that was about to be thrown. This may be inconsistent with developer expectations.</p>
<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
class E
{
 public:
 E ( ){ } // Assume constructor cannot cause an exception
};
try
{
 if ( ... )
 {
 throw E ( ); // Compliant – no exception thrown
 } // when constructing the object
}
// construction of E2 causes an exception to be thrown
class E2
{
 public:
 E2 ( )
 {
 throw 10;
 }
};
try
{
 if ( ... )
 {
 throw E2 ( ); // Non-compliant – int exception thrown
 // when constructing the E2 object
 }
}
</pre>
<p>See MISRA C++ 2008 [7]</p>
"""

# Tests the type of file


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    if not re.search("throw", file.contents()):
        return

    lexer = file.lexer()

    if not lexer:
        return

    for ref in file.filerefs("Throwby Exception", "Function"):
        ref_scope = ref.scope()

        if ref_scope.kindname() == "Class":
            constructors = ref_scope.refs("Define")

            for constructor in constructors:
                if constructor.ent().name() == ref_scope.name():
                    if re.search('throw', constructor.ent().contents()):
                        check.violation(ref.ent(), file,
                                        ref.line(), ref.column(), ERR1)
