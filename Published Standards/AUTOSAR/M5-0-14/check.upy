import re


ERR1 = 'The first operand of conditional-operator is not a bool type'
RELATIONAL_OPERATORS = {"==", "!=", ">", "<", ">=", "<=", "&&", "||"}


# The ID for the check
def ids():
    return ('M5-0-14', 'MISRA08_5-0-14', 'CPP_T017')


# The short name of the check
def name(id):
    return {
        'M5-0-14': 'Published Standards/AUTOSAR/The first operand of a conditional-operator shall have type bool',
        'MISRA08_5-0-14': 'Published Standards/MISRA-C++ 2008/5-0-14 The first operand of a conditional-operator shall have type bool',
        'CPP_T017': 'All Checks/Language Specific/C and C++/Types/The first operand of a conditional-operator shall have type bool',
    }[id]


# The short description of the check
def description():
    return 'The first operand of a conditional-operator shall have type bool.'


# The long description of the check
def detailed_description():
    return """
<p><b>Rationale</b></p>

<p>
If an expression with type other than <i>bool</i> is used as the first operand of a <i>conditional-operator</i>, then its result will be implicitly converted to <i>bool</i>. The first operand shall contain an explicit test (yielding a result of type <i>bool</i>) in order to clarify the intentions of the developer.
</p>

<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
int32_a = int16_b ? int32_c : int32_d;         // Non-compliant
int32_a = bool_b  ? int32_c : int32_d;         // Compliant
int32_a = ( int16_b &lt; 5 ) ? int32_c : int32_d; // Compliant
</pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def test_language(language):
    return language == 'C++'


def check(check, file):
    def check_violation(_lex):
        check.violation(None, file, _lex.line_begin(),
                        _lex.column_begin(), ERR1)

    lexer = file.lexer(True, 8, False, False)

    if not (lexer and re.search('/?', file.contents())):
        return

    lex = lexer.first()

    while lex:
        if lex.text() == "?" and lex.token() == "Operator":
            compliant = False
            lex_prev = lex.previous(
                ignore_whitespace=True, ignore_comments=True)

            while lex_prev and lex_prev.text() != "=":
                if lex_prev.token() == "Operator" and lex_prev.text() in RELATIONAL_OPERATORS:
                    compliant = True
                    break
                elif lex_prev.token() == "Identifier" and lex_prev.ent():
                    lex_type = get_ent_type(lex_prev.ent())
                    if lex_type == "bool":
                        compliant = True
                        break

                lex_prev = lex_prev.previous(
                    ignore_whitespace=True, ignore_comments=True)

                if lex_prev.line_begin() != lex.line_begin():
                    break

            if not compliant:
                check_violation(lex)

        lex = lex.next(ignore_whitespace=True, ignore_comments=True)


def get_ent_type(entity):
    typed_ref = entity.ref("Typed")

    while typed_ref:
        obj_ref_type = typed_ref.ent().type()
        typed_ref = typed_ref.ent().ref("Typed")

        if not typed_ref:
            return obj_ref_type

    return entity.type()
