ERR1 = 'Class derived from virtual base'


# The ID for the check
def ids():
    return ('M10-1-1', 'CPP_D006')

def name(id):
    return {
        'M10-1-1': """\
Published Standards/AUTOSAR/Class Derived From Virtual Bases""",
        'CPP_D006': """\
All Checks/Language Specific/C and C++/Declarations and Definitions/Class Derived From Virtual Bases"""

    }[id]



# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>Classes should not be derived from virtual bases.</p>
<p><b>Rationale</b></p>
<p>The use of virtual base classes can introduce a number of undefined and potentially confusing
behaviours. The use of virtual bases is not recommended.</p>
<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
class B {};
class D: public virtual B {}; // Non-compliant - B is a virtual base
</pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for class_ref in file.filerefs("Define", "Class"):
        virtual_base = class_ref.ent().ref("Virtual Base")

        if virtual_base:
            check.violation(class_ref.ent(), file,
                            class_ref.line(), class_ref.column(), ERR1)
