import re

ERR1 = "Unicode Identifer: \\%1"

def ids():
    return ('A2-13-6', 'CPP_I021')

def name(id):
    return {
        'A2-13-6': 'Published Standards/AUTOSAR/Universal character names shall be used only inside character or string literals',
        'CPP_I021': 'All Checks/Language Specific/C and C++/Identifiers/Universal character names shall be used only inside character or string literals',
    }[id]

def description():
    return 'Universal character names shall be used only inside character or string literals.'

def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>Using universal-character-names to define a language identifier can be confusing for a
developer and may be troublesome to use this identifier in the source code.</p>
<p><b>Example</b></p>
<pre>
//% $Id: A2-13-6.cpp 307578 2018-02-14 14:46:20Z michal.szczepankiewicz $
#include &lt;string&gt;
void F()
{
    const std::string c = "&#92;U0001f34c"; // Compliant
}

//non-compliant
void &#92;U0001f615()
{
    //
}
</pre>"""

def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    prev = ""
    for lexeme in file.lexer(False, 8, False, True):
        curr = lexeme.token() +  lexeme.text()
        if (prev == "Punctuation\\" and curr.startswith("IdentifierU")):
            check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1, lexeme.text())
        prev = curr
