# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 1-5-22


import re


ERR1 = 'Object of type %1 not initialized as a number'


def ids():
    return ('M5-0-12', 'CPP_T016', 'MISRA08_5-0-12', 'MISRA04_6.2')


def name(id):
    return {
        'M5-0-12': 'Published Standards/AUTOSAR/Signed char and unsigned char type shall only be used for the storage and use of numeric values',
        'CPP_T016': 'All Checks/Language Specific/C and C++/Types/Signed char and unsigned char type shall only be used for the storage and use of numeric values',
        'MISRA08_5-0-12': 'Published Standards/MISRA-C++ 2008/5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values',
        'MISRA04_6.2': 'Published Standards/MISRA-C 2004/6.2 Signed char and unsigned char type shall only be used for the storage and use of numeric values',
    }[id]


def description():
    return 'Signed char and unsigned char type shall only be used for the storage and use of numeric values.'


def detailed_description(id):
    return {
        'M5-0-12': '''
<p><b>Rationale</b></p>

<p>
There are three distinct <i>char</i> types, (plain) <i>char</i>, <i>signed char</i> and <i>unsigned char</i>. <i>signed char</i> and <i>unsigned char</i> shall only be used for numeric data and plain <i>char</i> shall only be used for character data. As it is <i>implementation-defined</i>, the signedness of the plain <i>char</i> type should not be assumed.
</p>

<p>
Note that Rule 3-9-2 also applies, so the <i>uint8_t</i> and <i>int8_t</i> types are covered by this rule.
</p>

<p><b>Example</b></p>

<pre style="margin-top:0;padding-top:0;">
#include &lt;cstdint&gt;

     int8_t a = 'a';  // Non-compliant - explicitly signed
    uint8_t b = '\\r'; // Non-compliant - explicitly unsigned
     int8_t c = 10;   // Compliant
    uint8_t d = 12U;  // Compliant
signed char e = 11;   // Compliant with this rule, but breaks Rule 3-9-2
</pre>

<p><b>See also</b></p>

<p>
Rule 3-9-2, Rule 5-0-11
</p>
''',

        'CPP_T016': '''
<p><b>Rationale</b></p>

<p>
There are three distinct <i>char</i> types, (plain) <i>char</i>, <i>signed char</i> and <i>unsigned char</i>. <i>signed char</i> and <i>unsigned char</i> shall only be used for numeric data and plain <i>char</i> shall only be used for character data. As it is <i>implementation-defined</i>, the signedness of the plain <i>char</i> type should not be assumed.
</p>

<p>
Note that Rule 3-9-2 also applies, so the <i>uint8_t</i> and <i>int8_t</i> types are covered by this rule.
</p>

<p><b>Example</b></p>

<pre style="margin-top:0;padding-top:0;">
#include &lt;cstdint&gt;

     int8_t a = 'a';  // Non-compliant - explicitly signed
    uint8_t b = '\\r'; // Non-compliant - explicitly unsigned
     int8_t c = 10;   // Compliant
    uint8_t d = 12U;  // Compliant
signed char e = 11;   // Compliant with this rule, but breaks Rule 3-9-2
</pre>

<p><b>See also</b></p>

<p>
Rule 3-9-2, Rule 5-0-11
</p>
''',

        'M5-0-12': '''
<p><b>Rationale</b></p>

<p>
There are three distinct <i>char</i> types, (plain) <i>char</i>, <i>signed char</i> and <i>unsigned char</i>. <i>signed char</i> and <i>unsigned char</i> shall only be used for numeric data and plain <i>char</i> shall only be used for character data. As it is <i>implementation-defined</i>, the signedness of the plain <i>char</i> type should not be assumed.
</p>

<p>
Note that Rule 3-9-2 also applies, so the <i>uint8_t</i> and <i>int8_t</i> types are covered by this rule.
</p>

<p><b>Example</b></p>

<pre style="margin-top:0;padding-top:0;">
#include &lt;cstdint&gt;

     int8_t a = 'a';  // Non-compliant - explicitly signed
    uint8_t b = '\\r'; // Non-compliant - explicitly unsigned
     int8_t c = 10;   // Compliant
    uint8_t d = 12U;  // Compliant
signed char e = 11;   // Compliant with this rule, but breaks Rule 3-9-2
</pre>

<p><b>See also</b></p>

<p>
Rule 3-9-2, Rule 5-0-11
</p>
''',

        'MISRA08_5-0-12': '''
<p><b>Rationale</b></p>

<p>
There are three distinct <i>char</i> types, (plain) <i>char</i>, <i>signed char</i> and <i>unsigned char</i>. <i>signed char</i> and <i>unsigned char</i> shall only be used for numeric data and plain <i>char</i> shall only be used for character data. As it is <i>implementation-defined</i>, the signedness of the plain <i>char</i> type should not be assumed.
</p>

<p>
Note that Rule 3-9-2 also applies, so the <i>uint8_t</i> and <i>int8_t</i> types are covered by this rule.
</p>

<p><b>Example</b></p>

<pre style="margin-top:0;padding-top:0;">
#include &lt;cstdint&gt;

     int8_t a = 'a';  // Non-compliant - explicitly signed
    uint8_t b = '\\r'; // Non-compliant - explicitly unsigned
     int8_t c = 10;   // Compliant
    uint8_t d = 12U;  // Compliant
signed char e = 11;   // Compliant with this rule, but breaks Rule 3-9-2
</pre>

<p><b>See also</b></p>

<p>
Rule 3-9-2, Rule 5-0-11
</p>
''',
        'MISRA04_6.2': '''
<p>
There are three distinct <i>char</i> types, (plain) <i>char</i>, <i>signed char</i> and <i>unsigned char</i>. <i>signed char</i> and <i>unsigned char</i> shall be used for numeric data and plain <i>char</i> shall be used for character data. The signedness of the plain <i>char</i> type is implementation defined and should not be relied upon.
</p>

<p>
Character values/data are character constants or string literals such as <code>'A'</code>, <code>'5'</code>, <code>'\\n'</code>, <code>"a"</code>.
</p>

<p>
Numeric values/data are numbers such as <code>0</code>, <code>5</code>, <code>23</code>, <code>\\x10</code>, <code>-3</code>.
</p>

<p>
Character sets map text characters onto numeric values. Character values are the "text".
</p>

<p>
The permissible operators on plain <i>char</i> types are the simple assignment operator (<code>=</code>), equality operators (<code>==</code>, <code>!=</code>) and explicit casts to integral types. Additionally, the second and third operands of the ternary conditional operator may both be of plain <i>char</i> type.
</p>
''',
    }[id]


def test_entity(file):
    return file.kind().check('header file, code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    numericCharTypes = {'int8_t', 'uint8_t', 'signed char', 'unsigned char'}

    for ref in file.filerefs('Init', 'Object'):
        ent = ref.ent()

        # Skip types that are not numeric char
        if ent.type() not in numericCharTypes:
            continue

        # Skip non-characters
        if ent.value()[0] != "'":
            continue

        check.violation(ent, file, ref.line(), ref.column(), ERR1, ent.type())
