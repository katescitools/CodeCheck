import re

AUTO_PTR = "auto_ptr"
DEF_NAME = "The std::auto_ptr type shall not be used"

# The ID for the check 
def ids():
    return ('A18-1-3', 'CPP_L028')

# The short name of the check
def name(id):
    return {
        'A18-1-3': """\
Published Standards/AUTOSAR/""" + DEF_NAME,
        'CPP_L028': """\
All Checks/Language Specific/C and C++/Libraries/""" + DEF_NAME
    }[id]

# The short description of the check
def description():
    return DEF_NAME

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>The std::auto_ptr type has been deprecated since the C++11 Language Standard and is removed from the C++17 Language Standard. Due to the lack 
of move semantics in pre C++11 standards, it provides unusual copy semantics and cannot be placed in STL containers.</p>
<p>The correct alternative is std::unique_ptr, which shall be used instead.</p>
<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
1 // $Id: A18-1-3.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include <cstdint>
3 #include <memory>
4 #include <vector>
5 void Fn() noexcept
6 {
7 std::auto_ptr<std::int32_t> ptr1(new std::int32_t(10)); // Non-compliant
8 std::unique_ptr<std::int32_t> ptr2 =
9 std::make_unique<std::int32_t>(10); // Compliant
10 std::vector<std::auto_ptr<std::int32_t>> v; // Non-compliant
11 }
</pre>
<p><b>See also</b></p>
<p>HIC++ v4.0 [9]: 1.3.4: Do not use deprecated STL library features.</p>
<p>cppreference.com [16]: std::auto_ptr.</p>
<p>A1-1-1 in section 6.1.1
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for 
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    if file.lexer():
        lexer = file.lexer()
    else:
        return

    lexeme = lexer.first()

    while lexeme:
        if lexeme.text() == "auto_ptr":
            check.violation(lexeme.ent(), file, lexeme.line_begin(), lexeme.column_begin(), DEF_NAME)

        lexeme = lexeme.next()
