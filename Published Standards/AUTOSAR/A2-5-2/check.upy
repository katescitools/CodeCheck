import re

ERR1 = 'Digraph used'

def ids():
    return ('A2-5-2', 'MISRA08_2-5-1', 'CPP_U000')

def name(id):
    return {
        'A2-5-2': 'Published Standards/AUTOSAR/Digraphs shall not be used',
        'MISRA08_2-5-1': 'Published Standards/MISRA-C++ 2008/2-5-1 Digraphs shall not be used',
        'CPP_U000': 'All Checks/Language Specific/C and C++/Unnecessary Constructs/Digraphs shall not be used',
    }[id]

def description():
    return 'Digraphs shall not be used.'

def detailed_description():
    return '''\
<p><b>Rationale</b></p>
<p>The digraphs are: &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:.</p>
<p>The use of digraphs may not meet developer expectations.</p>
<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
template &lt; typename T&gt;
class A
{
  public:
    template &lt; int32_t i &gt;
    void f2 ( );
};
void f ( A&lt;int32_t&gt; * a&lt;:10:&gt; )    // Non-compliant
&lt;% a&lt;:0:&gt;-&gt;f2&lt;20&gt; ( ); %&gt; // Non-compliant
// The above is equivalent to:
void f ( A&lt;int32_t&gt; * a[ 10 ] )
{
  a[ 0 ]-&gt;f2&lt;20&gt; ( );                 // Compliant
}
</pre>
<p><b>See also</b></p>
<p>
• MISRA C++ 2008 [7]: advisory 2-5-1 Digraphs should not be used.
</p>
<p>
• JSF December 2005 [8]: 4.4.1 AV Rule 12 The following digraphs will not be
used.
</p>
<p>
• HIC++ v4.0 [9]: 2.2.1 Do not use digraphs or trigraphs.
</p>'''

def test_entity(file):
    return file.kind().check('header file, code file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    previousText = ''
    for lexeme in file.lexer().lexemes():
        token = lexeme.token()
        currentText = lexeme.text()
        if token not in {'Whitespace', 'Comment', 'Newline'}:
            if (previousText == '<' and currentText in {'%', ':'}) or (previousText == '%' and currentText == ':'): # <% <: and %:
                check.violation(None, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
        previousText = currentText    
