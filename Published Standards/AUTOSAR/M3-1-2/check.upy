# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 12-21-21

ERR1 = 'Function declared at block scope'


def ids():
    return ('M3-1-2', 'MISRA08_3-1-2', 'CPP_D037')


def name(id):
    return {
        'M3-1-2': 'Published Standards/AUTOSAR/Functions shall not be declared at block scope',
        'MISRA08_3-1-2': 'Published Standards/MISRA-C++ 2008/3-1-2 Functions shall not be declared at block scope',
        'CPP_D037': 'All Checks/Language Specific/C and C++/Declarations and Definitions/Functions shall not be declared at block scope',
    }[id]


def description():
    return 'Functions shall not be declared at block scope.'


def detailed_description():
    return '''
<p><b>Rationale</b><br>
A function declared at block scope will refer to a member of the enclosing namespace, and so the declaration should be explicitly placed at the namespace level.
</p>

<p>
Additionally, where a declaration statement could either declare a function or an object, the compiler will choose to declare the function. To avoid potential developer confusion over the meaning of a declaration, functions should not be declared at block scope.
</p>

<p><b>Example</b></p>
<pre>
class A
{
};
void b1 ( )
{
    void f1 ();    // Non-compliant - declaring a function in block scope
    A a ();        // Non-compliant - appears to declare an object with no
                   // arguments to constructor, but it too declares a
                   // function 'a' returning type 'A' and taking no
                   // parameters.
}
</pre>
'''


def test_entity(file):
    return file.kind().check('code file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):

    refs = file.filerefs('Declare', 'Function ~Member')
    for ref in refs:

        if ref.scope() == file:
            continue
        if not ref.ent().parent() or ref.ent().parent().kind() != 'Namespace':
            continue
        check.violation(ref.ent(), file, ref.line(), ref.column(), ERR1)


    defineRefs = file.filerefs('Define', 'Function ~Member')
    for defined in defineRefs:

        declareIn = defined.ent().refs('Declare', 'Function ~Member')
        for declare in declareIn:
            check.violation(declare.ent(), file, declare.line(), declare.column(), ERR1)
