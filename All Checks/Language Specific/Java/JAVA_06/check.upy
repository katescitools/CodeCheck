# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 3-31-22


import re


ERR1 = 'Package "%1" is not all lowercase alphabetic characters and integers'
ERR2 = 'Possible package "%1" is unknown and not all lowercase alphabetic characters and integers'


def ids():
    return ('JAVA_06')


def name(id):
    return {
        'JAVA_06': '''All Checks/Language Specific/Java/\
Package names shall be in all lowercase alphabetic characters and integers
'''
    }[id]


def detailed_description():
    return '''
<p>
Package names shall be in all lowercase alphabetic characters and integers.
</p>

<p><b>Risk Assessment</b></p>
<p>
Package names are written in all lower case to avoid conflict with the names of classes or interfaces.
</p>
<p>
See https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html
</p>
'''


def test_language(language):
    return language == 'Java'


def test_entity(file):
    return file.kind().check('java file')


def test_global():
    return False


def define_options(check):
    check.options().checkbox('ignoreUnknown', 'Ignore unknown packages/superclasses', True)
    check.options().text('ignored', 'Ignored packages (full dot path, space separated)', '')


def check(check, file):
    # Make a set of packages to ignore
    global ignored
    if 'ignored' not in globals():
        ignored = set(check.options().lookup('ignored').split())

    # Make a set of packages that already flagged violations
    global violations
    if 'violations' not in globals():
        violations = set()

    # Filter out unknown packages
    ignoreUnknown = check.options().lookup('ignoreUnknown')
    if ignoreUnknown:
        entType = '~Unknown Package'
    else:
        entType = 'Package'

    # for ref in file.filerefs('DotRef', 'Package', True):
    for ref in file.filerefs('DotRef', entType, True):
        ent = ref.ent()
        name = ent.name()
        longName = ent.longname()

        # Skip names that conform to the standard
        if re.match('[a-z|0-9]*$', name):
            continue

        # Skip machine-generated packages
        if longName in ignored:
            continue

        # Skip repeats of the same package
        if longName in violations:
            continue

        # Package
        if ent.kind().check('~Unknown'):
            error = ERR1
        # Unknown: Either a package or a superclass
        else:
            error = ERR2

        violations.add(longName)
        check.violation(ent, file, ref.line(), ref.column(), error, name)
