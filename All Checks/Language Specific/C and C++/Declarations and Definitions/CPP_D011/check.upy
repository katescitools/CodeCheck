# This script is designed to run with Understand - CodeCheck
# Written by Robby Bennett
# 10-25-22


import re


ERR1 = 'Keyword "static" not used in this declaration'


def ids():
    return ('MISRA04_8.11', 'MISRA12_8.8', 'CPP_D011')


def name(id):
    return {
        'MISRA04_8.11': '''Published Standards/MISRA-C 2004/
8.11 Use the static keyword for internal linkage''',
        'MISRA12_8.8': '''Published Standards/MISRA C 2012/
8.8 Use the static keyword for internal linkage''',
        'CPP_D011': '''All Checks/Language Specific/C and C++/Declarations and Definitions/
Use the static keyword for internal linkage''',
    }[id]


def detailed_description(id):
    return {
        'MISRA04_8.11': '''
<p>
The static storage class specifier shall be used in definitions and declarations
of objects and functions that have internal linkage.
</p>

<p>
The <i>static</i> and <i>extern</i> storage class specifiers can be a source of
confusion. It is good practice to apply the <i>static</i> keyword consistently
to all declarations of objects and functions with internal linkage.
</p>

<p><b>Developer's Note</b></p>

<p>
If a function or object is defined in a macro, then a false positive may result.
This is because a ref position is relative to the macro in the file, instead of
relative to the macro expansion.
</p>
''',
        'MISRA12_8.8': '''
<p>
The static storage class specifier shall be used in all declarations of objects
and functions that have internal linkage.
</p>

<p><b>Amplification</b></p>

<p>
Since definitions are also declarations, this rule applies equally to
definitions.
</p>

<p><b>Rationale</b></p>

<p>
The Standard states that if an object or function is declared with the
<i>extern</i> storage class specifier and another declaration of the object or
function is already visible, the linkage is that specified by the earlier
declaration. This can be confusing because it might be expected that the
<i>extern</i> storage class specifier creates external linkage. The
<i>static</i> storage class specifier shall therefore be consistently applied to
objects and functions with internal linkage.
</p>

<p><b>Example</b></p>

</p>

<pre>
static int32_t x = 0;       /* definition: internal linkage   */
extern int32_t x;           /* Non-compliant                  */

static int32_t f ( void );  /* declaration: internal linkage  */
int32_t f ( void )          /* Non-compliant                  */
{
  return 1;
}

static int32_t g ( void );  /* declaration: internal linkage  */
extern int32_t g ( void )   /* Non-compliant                  */
{
  return 1;
}
</pre>

<p><b>Developer's Note</b></p>

<p>
If a function or object is defined in a macro, then a false positive may result.
This is because a ref position is relative to the macro in the file, instead of
relative to the macro expansion.
</p>
''',
        'CPP_D011': '''
<p>
The static storage class specifier shall be used in definitions and declarations
of objects and functions that have internal linkage.
</p>

<p>
The <i>static</i> and <i>extern</i> storage class specifiers can be a source of
confusion. It is good practice to apply the <i>static</i> keyword consistently
to all declarations of objects and functions with internal linkage.
</p>

<p><b>Developer's Note</b></p>

<p>
If a function or object is defined in a macro, then a false positive may result.
This is because a ref position is relative to the macro in the file, instead of
relative to the macro expansion.
</p>
''',
    }[id]


def test_language(language):
    return language == 'C++'


def test_entity(file):
    return True

def report_info(id):
    return {
        'MISRA04_8.11': {
            'Category':   'Required',
        },
        'MISRA12_8.8': {
            'Category': 'Required',
        },
    }[id]

def test_global():
    return False


def getClosestRef(ref, kind):
    closestRef = None
    closestLineDiff = closestColumnDiff = float('inf')

    for otherRef in ref.ent().refs(kind):
        # Skip other files
        if otherRef.file() != ref.file():
            continue

        # Skip if not the closest found so far
        lineDiff   = abs(otherRef.line() - ref.line())
        columnDiff = abs(otherRef.column() - ref.column())
        if lineDiff > closestLineDiff:
            continue
        if lineDiff == closestLineDiff and columnDiff > closestLineDiff:
            continue

        closestRef        = otherRef
        closestLineDiff   = lineDiff
        closestColumnDiff = columnDiff

    return closestRef


def check(check, file):
    for dec in file.filerefs('Define, Declare', 'Static Object, Static Function'):
        ent = dec.ent()

        # Get the closest typed reference
        closestTypeRef = getClosestRef(dec, 'Typed')

        # Skip if the declaration uses the keyword static
        static = False
        line = ( closestTypeRef.line() if closestTypeRef else dec.line() ) - 1
        lexer = file.lexer(False, 8, True, True)
        # Get the starting lexeme, moving back more for struct/enum to skip { }
        entType = ent.type()
        if entType and re.search('( |^)(struct|enum)( |$)', entType):
            lex = lexer.lexeme(closestTypeRef.line(), closestTypeRef.column())
        else:
            lex = lexer.lexeme(dec.line(), dec.column())
        # Go back through the lexemes and find 'static'
        while lex and lex.text() not in {';', '{', '}'} and lex.line_begin() >= line:
            if lex.text() == 'static':
                static = True
                break
            lex = lex.previous(True, True)
        # Skip
        if static:
            continue

        check.violation(ent, file, dec.line(), dec.column(), ERR1)
