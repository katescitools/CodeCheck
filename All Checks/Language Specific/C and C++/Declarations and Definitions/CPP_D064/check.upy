import re

ERR1 = "All constructors that are callable with a single argument of fundamental type shall be declared explicit."
ALLOWED_PARAM_COUNT = 1

# The ID for the check
def ids():
    return ('A12-1-4', 'MISRA08_12-1-3', 'CPP_D064')

# The short name of the check
def name(id):
    return {
        'A12-1-4': 'Published Standards/AUTOSAR/All constructors that are callable with a single argument of fundamental type shall be declared explicit.',
        'MISRA08_12-1-3': 'Published Standards/MISRA-C++ 2008/12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit.',
        'CPP_D064': 'All Checks/Language Specific/C and C++/Declarations and Definitions/All constructors that are callable with a single argument of fundamental type shall be declared explicit.',
    }[id]

# The long description of the check
def detailed_description():
    return """\
<p><b>Rationale</b></p>
<p>The explicit keyword prevents the constructor from being used to implicitly convert a fundamental type to the class type.</p>
<p>See: Fundamental-Types.</p>
<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
1 // $Id: A12-1-4.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
2 #include <cstdint>
3 class A
4 {
5 public:
6 explicit A(std::int32_t number) : x(number) {} // Compliant
7 A(A const&) = default;
8 A(A&&) = default;
9 A& operator=(A const&) = default;
10 A& operator=(A&&) = default;
11
12 private:
13 std::int32_t x;
14 };
15 class B
16 {
17 public:
18 B(std::int32_t number) : x(number) {} // Non-compliant
19 B(B const&) = default;
20 B(B&&) = default;
21 B& operator=(B const&) = default;
22 B& operator=(B&&) = default;
23
24 private:
25 std::int32_t x;
26 };
27 void F1(A a) noexcept
28 {
29 }
30 void F2(B b) noexcept
31 {
32 }
33 void F3() noexcept
34 {
35 F1(A(10));
36 // f1(10); // Compilation error - because of explicit constructor it is not
37 // possible to implicitly convert integer
38 // to type of class A
39 F2(B(20));
40 F2(20); // No compilation error - implicit conversion occurs
41 }
</pre>
<p><b>See also</b></p>
<p>MISRA C++ 2008 [7]: Rule 12-1-3 (Required) All constructors that are callable with a single argument of fundamental type shall be declared explicit.
</p>"""

# Tests the type of file
def test_entity(file):
    return file.kind().check('header file,code file')

# Optional - Return True if this check should be run on the entire project
# regardless of what files are selected. Should only be used for
# project-level checks
def test_global():
    return False

def test_language(language):
    return language == 'C++'

def check(check, file):
    for ref in file.filerefs("Define","Class", True):
        for ent in ref.ent().ents("Define","Public Function"):
            valid = False
            # parameter count
            if len(ent.ents("Define","Parameter")) == ALLOWED_PARAM_COUNT:
                param = ent.ents("Define","Parameter")
                # parameter type
                if param[0].ref("C Typed") and param[0].ref("C Typed").ent().kind().check("Typedef"):
                    valid = True
            if valid:
                if not ent.kind().check("Explicit"):
                    check.violation(ent, file, ent.ref().line(), ent.ref().column(), ERR1)
