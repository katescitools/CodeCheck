ERR1 = 'There shall be no unnamed namespace in header file.'


# The ID for the check
def ids():
    return ('M7-3-3', 'MISRA08_7-3-3', 'CPP_H004')


# The short name of the check
def name(id):
    return {
        'M7-3-3': 'Published Standards/AUTOSAR/There shall be no unnamed namespaces in header files.',
        'MISRA08_7-3-3': 'Published Standards/MISRA-C++ 2008/7-3-3 There shall be no unnamed namespaces in header files.',
        'CPP_H004': 'All Checks/Language Specific/C and C++/Headers/There shall be no unnamed namespaces in header files.',
    }[id]


# The long description of the check
def detailed_description():
    return """
<p><b>Rule</b></p>
<p>There shall be no unnamed namespaces in header files.</p>
<p><b>Rationale</b></p>
<p>An unnamed namespace will be unique within each translation unit. Any declarations appearing
in an unnamed namespace in a header will refer to different entities in each translation unit, which
may not be consistent with developer expectations.</p>
<p><b>Example</b></p>
<pre style="margin-top:0;padding-top:0;">
// Header.hpp
namespace // Non-compliant
{
 extern int32_t x;
}
// File1.cpp
#include "Header.hpp"
namespace
{
 int32_t x;
}
void fn_a ( void )
{
 x = 24;
}
// File2.cpp
#include "Header.hpp"
namespace
{
 int32_t x;
}
void fn_b ( void )
{
 fn_a ( );
 if ( x == 24 ) // This x will not have been initialized.
 {
 }
</pre>
"""


# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def check(check, file):
    for namespace_ref in file.filerefs("Begin", "Namespace"):
        if namespace_ref.ent().name() == "[unnamed]" and namespace_ref.file().kind().check("Header File"):
            check.violation(namespace_ref.ent(), file, namespace_ref.line(), namespace_ref.column(), ERR1)
