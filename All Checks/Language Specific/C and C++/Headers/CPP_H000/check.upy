# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 10-26-2022

import re


def ids():
    return ('MISRA12_20.3', 'CPP_H000', 'MISRA08_16-2-6', 'MISRA04_19.3')

def name(id):
    return {
        'MISRA12_20.3': """\
Published Standards/MISRA C 2012/20.3 The #include directive shall be followed
by either a <filename> or "filename" sequence""",
        'CPP_H000': """\
All Checks/Language Specific/C and C++/Headers/The #include directive shall be followed
by either a <filename> or "filename" sequence""",
        'MISRA08_16-2-6': """\
Published Standards/MISRA-C++ 2008/16-2-6 The #include directive shall be followed
by either a <filename> or "filename" sequence""",
        'MISRA04_19.3': """\
Published Standards/MISRA-C 2004/19.3 The #include directive shall be followed
by either a <filename> or "filename" sequence"""
    }[id]

def detailed_description(id):
    return {
    'MISRA12_20.3': """\
<p><b>Amplification</b><br>
This rule applies after macro replacement has been performed.
</p>

<p><b>Rationale</b><br>
The behaviour is undefined if a <i>#include</i> directive does not use one of the following forms:
</p>

<ul>
  <li>
    #include <filename>
  </li>
  <li>
    #include "filename"
  </li>
</ul>

<b>Example</b><pre style="margin-top:0;padding-top:0;">
  #include "filename.h"     /* Compliant */
  #include &lt;filename.h&gt;     /* Compliant */
  #include another.h        /* Non-compliant */

  #define HEADER "filename.h"
  #include HEADER           /* Compliant */
  #define FILENAME file2.h
  #include FILENAME         /* Non-compliant */

  #define BASE "base"
  #define EXT ".ext"
  #include BASE EXT          /* Non-compliant - strings are concatenated
                              * after preprocessing */

  #include "./include/cpu.h" /* Compliant - filename may include a path */
</pre>""",
    'CPP_H000': """\
<p><b>Rationale</b></p>
These are the only forms for the #include directive permitted by ISO/IEC 14882:2003 [1].<br></p>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
For example, the following are allowed.
#include "filename.h" // Compliant
#include &lt;filename.h&gt; // Compliant
#define HEADER "filename.h" // Non-compliant with Rule 16-2-2
#include HEADER // Compliant
#include another.h // Non-compliant
</pre>""",
    'MISRA08_16-2-6': """\
<p><b>Rationale</b></p>
These are the only forms for the #include directive permitted by ISO/IEC 14882:2003 [1].<br></p>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
For example, the following are allowed.
#include "filename.h" // Compliant
#include &lt;filename.h&gt; // Compliant
#define HEADER "filename.h" // Non-compliant with Rule 16-2-2
#include HEADER // Compliant
#include another.h // Non-compliant
</pre>""",
    'MISRA04_19.3': """\
<p>For example, the following are allowed.</p>
<pre>
  #include "filename.h"
  #include &lt;filename.h&gt;
  #define FILE_A "filename.h"
  #include FILE_A
</pre>""",
    }[id]

def test_entity(file):
    return file.kind().check('code file, header file')

def test_language(language):
    return language == 'C++'

def noop_always():
    return True

def check(check, file):
    pass

