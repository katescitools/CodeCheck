# This script is designed to run with Understand - CodeCheck
# Rewritten by Robby Bennett
# 2-21-23


import re


ERR1 = 'Standard header file setjmp.h used'


def ids():
    return ('MISRA12_21.4', 'CPP_H021')


def name(id):
    return {
        'MISRA12_21.4': '''Published Standards/MISRA C 2012/\
21.4 The standard header file &lt;setjmp.h&gt; shall not be used''',
        'CPP_H021': '''All Checks/Language Specific/C and C++/Headers/\
The standard header file &lt;setjmp.h&gt; shall not be used''',
    }[id]


def detailed_description():
    return '''
<p><b>Amplification</b></p>
None of the facilities that are specified as being provided by &lt;setjmp.h&gt;
shall be used.
</p>

<p><b>Rationale</b></p>
<i>setjmp</i> and <i>longjmp</i> allow the normal function call mechanisms to be
bypassed. Their use may lead to undefined and unspecified behaviour.
</p>
'''


def report_info(id):
    return {
        'MISRA12_21.4': {
            'Category': 'Required',
        },
    }[id]


def test_entity(file):
    return file.kind().check('Header File, Code File')


def test_global():
    return False


def test_language(language):
    return language == 'C++'


def define_options(check):
    check.options().checkbox('oneViolation', 'Limit one violation per file', True)


def check(check, file):
    global oneViolation
    if 'oneViolation' not in globals():
        oneViolation = check.options().lookup('oneViolation')

    for ref in file.filerefs('Include', 'File', oneViolation):
        ent = ref.ent()
        if ent.name() == 'setjmp.h':
            check.violation(ent, file, ref.line(), ref.column(), ERR1)
