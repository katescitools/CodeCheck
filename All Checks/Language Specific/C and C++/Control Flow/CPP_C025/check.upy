# This script is designed to run with Understand - CodeCheck
# Written by Jason Quinn
# 2/8/21
import re

ERR1 = 'File contains "goto" statement.'

# The ID for the check
def ids():
    return ('RECOMMENDED_06', 'CPP_C025', 'HIS_03', 'MISRA04_14.4', 'A6-6-1', 'MISRA12_15.1')

# The short name of the check
def name(id):
    return {
        'RECOMMENDED_06': 'SciTools\' Recommended Checks/Goto Statements',
        'CPP_C025': 'All Checks/Language Specific/C and C++/Control Flow/Goto Statements',
        'HIS_03': 'Published Standards/Hersteller Initiative Software (HIS) Metrics/3. Number of Goto Statements(GOTO)',
        'MISRA04_14.4': 'Published Standards/MISRA-C 2004/14.4 The goto statement shall not be used',
        'A6-6-1': 'Published Standards/AUTOSAR/The goto statement shall not be used.',
        'MISRA12_15.1': 'Published Standards/MISRA C 2012/15.1 The goto statement should not be used',
    }[id]

# The long description of the check
def detailed_description(id):
    return {
        'RECOMMENDED_06': """\
<p><b>Rationale</b></p>
<p>The "goto" statement is considered very dangerous in many aspects and should almost never be used.</p>""",
        'CPP_C025': """\
<p><b>Rationale</b></p>
<p>The "goto" statement is considered very dangerous in many aspects and should almost never be used.</p>""",
        'HIS_03': """\
<p>This drastically increases the number of paths and thus reduces testability.</p>""",
        'MISRA04_14.4': """\
<p>The "goto" statement shall not be used.</p>""",
        'A6-6-1': """\
<p><b>Rationale</b></p>

<p>
Using goto statement significantly complicates the logic, makes the code difficult to read and maintain, and may lead to incorrect resources releases or memory leaks.
</p>

<p><b>Example</b></p>

<pre>
// $Id: A6-6-1.cpp 289436 2017-10-04 10:45:23Z michal.szczepankiewicz $
#include &lt;cstdint&gt;
namespace
{
    constexpr std::int32_t loopLimit = 100;
}
void F1(std::int32_t n) noexcept
{
    if (n &lt; 0)
    {
    // goto exit; // Non-compliant - jumping to exit from here crosses ptr
    // pointer initialization, compilation
    // error
    }

    std::int32_t* ptr = new std::int32_t(n);
// ...
exit:
    delete ptr;
}
void F2() noexcept
{
    // ...
    goto error; // Non-compliant
// ...
error:; // Error handling and cleanup
}
void F3() noexcept
{
    for (std::int32_t i = 0; i &lt; loopLimit; ++i)
    {
        for (std::int32_t j = 0; j &lt; loopLimit; ++j)
        {
            for (std::int32_t k = 0; k &lt; loopLimit; ++k)
            {
                if ((i == j) && (j == k))
                {
                    // ...
                    goto loop_break; // Non-compliant
                }
            }
        }
    }

loop_break:; // ...
}
</pre>

<p><b>See also</b></p>

<p>
• JSF December 2005 [8]: AV Rule 189 The goto statement shall not be used.
</p>

<p>
• C++ Core Guidelines [11]: ES.76: Avoid goto.
</p>

<p>
• C++ Core Guidelines [11]: NR.6: Don't: Place all cleanup actions at the end of a function and goto exit.
</p>
""",
        'MISRA12_15.1': """\
<p>
The goto statement should not be used
</p>

<p><b>Rationale</b></p>

<p>
Unconstrained use of goto can lead to programs that are unstructured and extremely difficult to understand.
</p>

<p>
In some cases a total ban on goto requires the introduction of flags to ensure correct control flow, and it is possible that these flags may themselves be less transparent than the goto they replace. Therefore, if this rule is not followed, the restricted use of goto is allowed where that use follows the guidance in Rule 15.2 and Rule 15.3.
</p>

<p><b>See also</b></p>

<p>
Rule 9.1, Rule 15.2, Rule 15.3, Rule 15.4
</p>
""",
    }[id]

# Tests the type of file
def test_entity(file):
    return file.kind().check('code file, header file')

def test_global():
    return False

def test_language(language):
    return language == 'C++'

def define_options(check):
    check.options().checkbox('ignoreInactive', 'Ignore inactive code', False)

def check(check, file):
    if not re.search('goto', file.contents().lower()):
        return

    lexer = file.lexer()
    if not lexer:
        return

    lexemes = lexer.lexemes()
    for lexeme in lexemes:
        if lexeme.text() == 'goto' and lexeme.token() == 'Keyword':
            if not (check.option().lookup('ignoreInactive') and lexeme.inactive()):
                check.violation(file, file, lexeme.line_begin(), lexeme.column_begin(), ERR1)
